name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install fastmcp selenium httpx websockets aiofiles
        uv pip install .[dev]

    - name: Run basic tests
      run: uv run pytest tests/ -v --tb=short -k "not test_browserless"

    - name: Lint with ruff
      run: uv run ruff check .

    - name: Format with black
      run: uv run black --check .

    - name: Type check with mypy
      run: uv run mypy src/

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
        tags: |
          type=sha,prefix=,suffix=-{{sha}}
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes tools
      uses: engineerd/setup-kind@v0.7.0
      with:
        version: "v0.22.0"

    - name: Deploy to test environment
      run: |
        echo "Deployment would happen here"
        echo "Image: ghcr.io/${{ github.repository }}:${{ github.sha }}"
        
        # Example deployment command (would be customized for your environment)
        # kubectl set image deployment/selenium-mcp \
        #   selenium-mcp=ghcr.io/${{ github.repository }}:${{ github.sha }}

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup UV
      uses: astral-sh/setup-uv@v3

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install fastmcp selenium httpx websockets aiofiles
        uv pip install .[dev]

    - name: Check for vulnerabilities
      run: uv pip check

    - name: Scan for secrets
      uses: gitleaks/gitleaks-action@v2

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup UV
      uses: astral-sh/setup-uv@v3

    - name: Generate API documentation
      run: |
        echo "Documentation generation skipped - pydoc-markdown not required"

    - name: Check README links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: mlc_config.json

  helm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.13.0'

    - name: Lint Helm chart
      run: |
        helm lint charts/selenium-mcp/
        echo "Helm lint completed successfully"

    - name: Test template rendering
      run: |
        helm template selenium-mcp-test charts/selenium-mcp/ --debug
        echo "Helm template rendering test completed"

    - name: Validate values schema
      run: |
        # Test with different value combinations
        helm template selenium-mcp-test charts/selenium-mcp/ --set browserless.enabled=true
        helm template selenium-mcp-test charts/selenium-mcp/ --set browserless.enabled=false
        helm template selenium-mcp-test charts/selenium-mcp/ --set mcp.browserlessToken="test-token"
        echo "Values schema validation completed"

    - name: Check chart dependencies
      run: |
        helm dependency build charts/selenium-mcp/
        helm dependency update charts/selenium-mcp/
        echo "Chart dependencies checked"